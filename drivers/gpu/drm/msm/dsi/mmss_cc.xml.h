#ifndef MMSS_CC_XML
#define MMSS_CC_XML

/* Autogenerated file, DO NOT EDIT manually!

This file was generated by the rules-ng-ng headergen tool in this git repository:
http://0x04.net/cgit/index.cgi/rules-ng-ng
git clone git://0x04.net/rules-ng-ng

The rules-ng-ng source files this header was generated from are:
- /home/robclark/src/freedreno/envytools/rnndb/msm.xml                 (    595 bytes, from 2013-07-05 19:21:12)
- /home/robclark/src/freedreno/envytools/rnndb/freedreno_copyright.xml (   1453 bytes, from 2013-03-31 16:51:27)
- /home/robclark/src/freedreno/envytools/rnndb/mdp4/mdp4.xml           (  18030 bytes, from 2013-07-05 19:21:12)
- /home/robclark/src/freedreno/envytools/rnndb/dsi/dsi.xml             (   6265 bytes, from 2013-07-05 19:21:12)
- /home/robclark/src/freedreno/envytools/rnndb/dsi/sfpb.xml            (    307 bytes, from 2013-07-05 19:21:12)
- /home/robclark/src/freedreno/envytools/rnndb/dsi/mmss_cc.xml         (   1622 bytes, from 2013-07-05 19:21:12)
- /home/robclark/src/freedreno/envytools/rnndb/hdmi/qfprom.xml         (    600 bytes, from 2013-07-05 19:21:12)
- /home/robclark/src/freedreno/envytools/rnndb/hdmi/hdmi.xml           (  19288 bytes, from 2013-07-05 19:21:12)

Copyright (C) 2013 by the following authors:
- Rob Clark <robdclark@gmail.com> (robclark)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


#define REG_MMSS_CC_AHB						0x00000008

#define REG_MMSS_CC_DSI_CLK_CTRL				0x0000004c


#define REG_MMSS_CC_DSI_CLK_CTRL_CC				0x0000004c
#define MMSS_CC_DSI_CLK_CTRL_CC_CLK_EN				0x00000001
#define MMSS_CC_DSI_CLK_CTRL_CC_ROOT_EN				0x00000004
#define MMSS_CC_DSI_CLK_CTRL_CC_MND_EN				0x00000020
#define MMSS_CC_DSI_CLK_CTRL_CC_MND_MODE__MASK			0x000000c0
#define MMSS_CC_DSI_CLK_CTRL_CC_MND_MODE__SHIFT			6
static inline uint32_t MMSS_CC_DSI_CLK_CTRL_CC_MND_MODE(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_CLK_CTRL_CC_MND_MODE__SHIFT) & MMSS_CC_DSI_CLK_CTRL_CC_MND_MODE__MASK;
}
#define MMSS_CC_DSI_CLK_CTRL_CC_PMXO_SEL__MASK			0x00000300
#define MMSS_CC_DSI_CLK_CTRL_CC_PMXO_SEL__SHIFT			8
static inline uint32_t MMSS_CC_DSI_CLK_CTRL_CC_PMXO_SEL(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_CLK_CTRL_CC_PMXO_SEL__SHIFT) & MMSS_CC_DSI_CLK_CTRL_CC_PMXO_SEL__MASK;
}

#define REG_MMSS_CC_DSI_CLK_CTRL_MD				0x00000050
#define MMSS_CC_DSI_CLK_CTRL_MD_D__MASK				0x000000ff
#define MMSS_CC_DSI_CLK_CTRL_MD_D__SHIFT			0
static inline uint32_t MMSS_CC_DSI_CLK_CTRL_MD_D(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_CLK_CTRL_MD_D__SHIFT) & MMSS_CC_DSI_CLK_CTRL_MD_D__MASK;
}
#define MMSS_CC_DSI_CLK_CTRL_MD_M__MASK				0x0000ff00
#define MMSS_CC_DSI_CLK_CTRL_MD_M__SHIFT			8
static inline uint32_t MMSS_CC_DSI_CLK_CTRL_MD_M(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_CLK_CTRL_MD_M__SHIFT) & MMSS_CC_DSI_CLK_CTRL_MD_M__MASK;
}

#define REG_MMSS_CC_DSI_CLK_CTRL_NS				0x00000054
#define MMSS_CC_DSI_CLK_CTRL_NS_SRC__MASK			0x0000000f
#define MMSS_CC_DSI_CLK_CTRL_NS_SRC__SHIFT			0
static inline uint32_t MMSS_CC_DSI_CLK_CTRL_NS_SRC(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_CLK_CTRL_NS_SRC__SHIFT) & MMSS_CC_DSI_CLK_CTRL_NS_SRC__MASK;
}
#define MMSS_CC_DSI_CLK_CTRL_NS_PRE_DIV_FUNC__MASK		0x00fff000
#define MMSS_CC_DSI_CLK_CTRL_NS_PRE_DIV_FUNC__SHIFT		12
static inline uint32_t MMSS_CC_DSI_CLK_CTRL_NS_PRE_DIV_FUNC(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_CLK_CTRL_NS_PRE_DIV_FUNC__SHIFT) & MMSS_CC_DSI_CLK_CTRL_NS_PRE_DIV_FUNC__MASK;
}
#define MMSS_CC_DSI_CLK_CTRL_NS_VAL__MASK			0xff000000
#define MMSS_CC_DSI_CLK_CTRL_NS_VAL__SHIFT			24
static inline uint32_t MMSS_CC_DSI_CLK_CTRL_NS_VAL(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_CLK_CTRL_NS_VAL__SHIFT) & MMSS_CC_DSI_CLK_CTRL_NS_VAL__MASK;
}

#define REG_MMSS_CC_DSI_PCLK_CTRL				0x00000130


#define REG_MMSS_CC_DSI_PCLK_CTRL_CC				0x00000130
#define MMSS_CC_DSI_PCLK_CTRL_CC_CLK_EN				0x00000001
#define MMSS_CC_DSI_PCLK_CTRL_CC_ROOT_EN			0x00000004
#define MMSS_CC_DSI_PCLK_CTRL_CC_MND_EN				0x00000020
#define MMSS_CC_DSI_PCLK_CTRL_CC_MND_MODE__MASK			0x000000c0
#define MMSS_CC_DSI_PCLK_CTRL_CC_MND_MODE__SHIFT		6
static inline uint32_t MMSS_CC_DSI_PCLK_CTRL_CC_MND_MODE(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_PCLK_CTRL_CC_MND_MODE__SHIFT) & MMSS_CC_DSI_PCLK_CTRL_CC_MND_MODE__MASK;
}
#define MMSS_CC_DSI_PCLK_CTRL_CC_PMXO_SEL__MASK			0x00000300
#define MMSS_CC_DSI_PCLK_CTRL_CC_PMXO_SEL__SHIFT		8
static inline uint32_t MMSS_CC_DSI_PCLK_CTRL_CC_PMXO_SEL(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_PCLK_CTRL_CC_PMXO_SEL__SHIFT) & MMSS_CC_DSI_PCLK_CTRL_CC_PMXO_SEL__MASK;
}

#define REG_MMSS_CC_DSI_PCLK_CTRL_MD				0x00000134
#define MMSS_CC_DSI_PCLK_CTRL_MD_D__MASK			0x000000ff
#define MMSS_CC_DSI_PCLK_CTRL_MD_D__SHIFT			0
static inline uint32_t MMSS_CC_DSI_PCLK_CTRL_MD_D(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_PCLK_CTRL_MD_D__SHIFT) & MMSS_CC_DSI_PCLK_CTRL_MD_D__MASK;
}
#define MMSS_CC_DSI_PCLK_CTRL_MD_M__MASK			0x0000ff00
#define MMSS_CC_DSI_PCLK_CTRL_MD_M__SHIFT			8
static inline uint32_t MMSS_CC_DSI_PCLK_CTRL_MD_M(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_PCLK_CTRL_MD_M__SHIFT) & MMSS_CC_DSI_PCLK_CTRL_MD_M__MASK;
}

#define REG_MMSS_CC_DSI_PCLK_CTRL_NS				0x00000138
#define MMSS_CC_DSI_PCLK_CTRL_NS_SRC__MASK			0x0000000f
#define MMSS_CC_DSI_PCLK_CTRL_NS_SRC__SHIFT			0
static inline uint32_t MMSS_CC_DSI_PCLK_CTRL_NS_SRC(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_PCLK_CTRL_NS_SRC__SHIFT) & MMSS_CC_DSI_PCLK_CTRL_NS_SRC__MASK;
}
#define MMSS_CC_DSI_PCLK_CTRL_NS_PRE_DIV_FUNC__MASK		0x00fff000
#define MMSS_CC_DSI_PCLK_CTRL_NS_PRE_DIV_FUNC__SHIFT		12
static inline uint32_t MMSS_CC_DSI_PCLK_CTRL_NS_PRE_DIV_FUNC(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_PCLK_CTRL_NS_PRE_DIV_FUNC__SHIFT) & MMSS_CC_DSI_PCLK_CTRL_NS_PRE_DIV_FUNC__MASK;
}
#define MMSS_CC_DSI_PCLK_CTRL_NS_VAL__MASK			0xff000000
#define MMSS_CC_DSI_PCLK_CTRL_NS_VAL__SHIFT			24
static inline uint32_t MMSS_CC_DSI_PCLK_CTRL_NS_VAL(uint32_t val)
{
	return ((val) << MMSS_CC_DSI_PCLK_CTRL_NS_VAL__SHIFT) & MMSS_CC_DSI_PCLK_CTRL_NS_VAL__MASK;
}


#endif /* MMSS_CC_XML */
